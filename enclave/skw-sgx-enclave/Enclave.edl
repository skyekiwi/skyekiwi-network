// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_env.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    from "sgx_fs.edl" import *;

    trusted {
        public sgx_status_t unit_test();
        public sgx_status_t integration_test_generate_file();
        public sgx_status_t integration_test_compare_file();

        public sgx_status_t ecall_protocol_upstream_pre(
            [out] uint8_t id[32]
        );
        public sgx_status_t ecall_protocol_upstream_cid_list(
            [in, size = cid_len] const uint8_t * cid_ptr, size_t cid_len,
            [in] uint8_t id[32]
        );
        public sgx_status_t ecall_protocol_upstream_seal(
            [in, size = cid_len] const uint8_t * cid_ptr, size_t cid_len,
            [in] uint8_t id[32],
            [in, size = encryption_schema_len] const uint8_t * encryption_schema_ptr, size_t encryption_schema_len
        );

        public sgx_status_t ecall_protocol_downstream_pre(
            [in, size = encoded_sealed_len] const uint8_t * encoded_sealed_ptr, size_t encoded_sealed_len,
            [out] uint8_t id[32],
            [out] uint8_t cid[46]
        );
        public sgx_status_t ecall_protocol_downstream_cid_list(
            [in, size = encrypted_cid_len] const uint8_t * encrypted_cid_ptr, size_t encrypted_cid_len,
            [in] uint8_t id[32]
        );
        public sgx_status_t ecall_protocol_downstream_unseal(
            [in] uint8_t id[32]
        );
    };
};
