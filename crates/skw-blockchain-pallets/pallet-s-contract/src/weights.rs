// This file is part of SkyeKiwi Network.

// Copyright (C) 2021 - 2022 SkyeKiwi.
// SPDX-License-Identifier: GPL-3.0-or-later


//! Autogenerated weights for pallet_s_contract
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: ``, CPU: ``
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// /Users/songzhou/Desktop/skyekiwi-network/target/release/skyekiwi-node
// benchmark
// pallet
// --steps
// 50
// --repeat
// 20
// --pallet
// pallet_s_contract
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --output
// /Users/songzhou/Desktop/skyekiwi-network/crates/skw-blockchain-pallets/pallet-s-contract/src/weights.rs
// --template
// /Users/songzhou/Desktop/skyekiwi-network/misc/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_s_contract.
pub trait WeightInfo {
	fn add_authorized_shard_operator() -> Weight;
	fn initialize_shard() -> Weight;
	fn register_contract() -> Weight;
	fn push_call() -> Weight;
	fn shard_rollup() -> Weight;
}

/// Weights for pallet_s_contract using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: SContract ShardOperator (r:1 w:1)
	fn add_authorized_shard_operator() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(5_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: SContract ShardOperator (r:1 w:0)
	// Storage: Secrets CurrentSecretId (r:1 w:1)
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Storage: Secrets Metadata (r:0 w:1)
	// Storage: Secrets Owner (r:0 w:1)
	// Storage: SContract ShardSecretIndex (r:0 w:1)
	// Storage: SContract ShardPublicKey (r:0 w:1)
	// Storage: SContract ShardHighCallIndex (r:0 w:1)
	fn initialize_shard() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(32_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: Preimage PreimageFor (r:1 w:0)
	// Storage: SContract WasmBlob (r:1 w:1)
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: SContract CurrentCallIndex (r:1 w:1)
	// Storage: SContract CallHistory (r:1 w:1)
	// Storage: SContract CallRecord (r:0 w:1)
	fn register_contract() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(30_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: SContract CurrentCallIndex (r:1 w:1)
	// Storage: SContract CallHistory (r:1 w:1)
	// Storage: SContract CallRecord (r:0 w:1)
	fn push_call() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: SContract ShardOperator (r:1 w:0)
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: Secrets Operator (r:1 w:0)
	// Storage: Secrets Owner (r:1 w:0)
	// Storage: Secrets Metadata (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Storage: SContract ShardHighCallIndex (r:1 w:1)
	// Storage: Preimage PreimageFor (r:0 w:1)
	fn shard_rollup() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(45_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: SContract ShardOperator (r:1 w:1)
	fn add_authorized_shard_operator() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(5_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: SContract ShardOperator (r:1 w:0)
	// Storage: Secrets CurrentSecretId (r:1 w:1)
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Storage: Secrets Metadata (r:0 w:1)
	// Storage: Secrets Owner (r:0 w:1)
	// Storage: SContract ShardSecretIndex (r:0 w:1)
	// Storage: SContract ShardPublicKey (r:0 w:1)
	// Storage: SContract ShardHighCallIndex (r:0 w:1)
	fn initialize_shard() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(32_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: Preimage PreimageFor (r:1 w:0)
	// Storage: SContract WasmBlob (r:1 w:1)
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: SContract CurrentCallIndex (r:1 w:1)
	// Storage: SContract CallHistory (r:1 w:1)
	// Storage: SContract CallRecord (r:0 w:1)
	fn register_contract() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(30_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: SContract CurrentCallIndex (r:1 w:1)
	// Storage: SContract CallHistory (r:1 w:1)
	// Storage: SContract CallRecord (r:0 w:1)
	fn push_call() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: SContract ShardOperator (r:1 w:0)
	// Storage: SContract ShardSecretIndex (r:1 w:0)
	// Storage: Secrets Operator (r:1 w:0)
	// Storage: Secrets Owner (r:1 w:0)
	// Storage: Secrets Metadata (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Storage: SContract ShardHighCallIndex (r:1 w:1)
	// Storage: Preimage PreimageFor (r:0 w:1)
	fn shard_rollup() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(45_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
}